/* tslint:disable */
/* eslint-disable */
/**
 * Developer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from "../runtime.ts";
import type {
  CreateApp409Response,
  CreateApp422Response,
  CreateApp423Response,
  CreateProductRequest,
  DeletedObject,
  ListProducts,
  ListProjects400Response,
  ListProjects401Response,
  ListProjects403Response,
  ListProjects404Response,
  ListProjects429Response,
  ListProjects500Response,
  Product,
} from "../models/index.ts";
import {
    CreateApp409ResponseFromJSON,
    CreateApp409ResponseToJSON,
    CreateApp422ResponseFromJSON,
    CreateApp422ResponseToJSON,
    CreateApp423ResponseFromJSON,
    CreateApp423ResponseToJSON,
    CreateProductRequestFromJSON,
    CreateProductRequestToJSON,
    DeletedObjectFromJSON,
    DeletedObjectToJSON,
    ListProductsFromJSON,
    ListProductsToJSON,
    ListProjects400ResponseFromJSON,
    ListProjects400ResponseToJSON,
    ListProjects401ResponseFromJSON,
    ListProjects401ResponseToJSON,
    ListProjects403ResponseFromJSON,
    ListProjects403ResponseToJSON,
    ListProjects404ResponseFromJSON,
    ListProjects404ResponseToJSON,
    ListProjects429ResponseFromJSON,
    ListProjects429ResponseToJSON,
    ListProjects500ResponseFromJSON,
    ListProjects500ResponseToJSON,
    ProductFromJSON,
    ProductToJSON,
} from "../models/index.ts";

export interface CreateProductOperationRequest {
    projectId: string;
    createProductRequest: CreateProductRequest;
}

export interface DeleteProductRequest {
    projectId: string;
    productId: string;
}

export interface GetProductRequest {
    projectId: string;
    productId: string;
    expand?: Array<GetProductExpandEnum>;
}

export interface ListProductsRequest {
    projectId: string;
    appId?: string;
    startingAfter?: string;
    limit?: number;
    expand?: Array<ListProductsExpandEnum>;
}

/**
 * 
 */
export class ProductApi extends runtime.BaseAPI {

    /**
     * This endpoint requires the following permission(s): `project_configuration:products:read_write`.
     * Create a product
     */
    async createProductRaw(requestParameters: CreateProductOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Product>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling createProduct().'
            );
        }

        if (requestParameters['createProductRequest'] == null) {
            throw new runtime.RequiredError(
                'createProductRequest',
                'Required parameter "createProductRequest" was null or undefined when calling createProduct().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{project_id}/products`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProductRequestToJSON(requestParameters['createProductRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): `project_configuration:products:read_write`.
     * Create a product
     */
    async createProduct(requestParameters: CreateProductOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Product> {
        const response = await this.createProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): `project_configuration:products:read_write`.
     * Delete a product
     */
    async deleteProductRaw(requestParameters: DeleteProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletedObject>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling deleteProduct().'
            );
        }

        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling deleteProduct().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{project_id}/products/{product_id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"product_id"}}`, encodeURIComponent(String(requestParameters['productId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletedObjectFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): `project_configuration:products:read_write`.
     * Delete a product
     */
    async deleteProduct(requestParameters: DeleteProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletedObject> {
        const response = await this.deleteProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): `project_configuration:products:read`.
     * Get a product
     */
    async getProductRaw(requestParameters: GetProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Product>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getProduct().'
            );
        }

        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling getProduct().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{project_id}/products/{product_id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"product_id"}}`, encodeURIComponent(String(requestParameters['productId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): `project_configuration:products:read`.
     * Get a product
     */
    async getProduct(requestParameters: GetProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Product> {
        const response = await this.getProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint requires the following permission(s): `project_configuration:products:read`.
     * Get a list of products
     */
    async listProductsRaw(requestParameters: ListProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListProducts>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling listProducts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['appId'] != null) {
            queryParameters['app_id'] = requestParameters['appId'];
        }

        if (requestParameters['startingAfter'] != null) {
            queryParameters['starting_after'] = requestParameters['startingAfter'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{project_id}/products`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListProductsFromJSON(jsonValue));
    }

    /**
     * This endpoint requires the following permission(s): `project_configuration:products:read`.
     * Get a list of products
     */
    async listProducts(requestParameters: ListProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListProducts> {
        const response = await this.listProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetProductExpandEnum = {
    App: 'app'
} as const;
export type GetProductExpandEnum = typeof GetProductExpandEnum[keyof typeof GetProductExpandEnum];
/**
 * @export
 */
export const ListProductsExpandEnum = {
    ItemsApp: 'items.app'
} as const;
export type ListProductsExpandEnum = typeof ListProductsExpandEnum[keyof typeof ListProductsExpandEnum];

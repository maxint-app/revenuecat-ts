/* tslint:disable */
/* eslint-disable */
/**
 * Developer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ListProjects400Response,
  ListProjects401Response,
  ListProjects403Response,
  ListProjects404Response,
  ListProjects429Response,
  ListProjects500Response,
  ListSubscriptions,
} from '../models/index';
import {
    ListProjects400ResponseFromJSON,
    ListProjects400ResponseToJSON,
    ListProjects401ResponseFromJSON,
    ListProjects401ResponseToJSON,
    ListProjects403ResponseFromJSON,
    ListProjects403ResponseToJSON,
    ListProjects404ResponseFromJSON,
    ListProjects404ResponseToJSON,
    ListProjects429ResponseFromJSON,
    ListProjects429ResponseToJSON,
    ListProjects500ResponseFromJSON,
    ListProjects500ResponseToJSON,
    ListSubscriptionsFromJSON,
    ListSubscriptionsToJSON,
} from '../models/index';

export interface ListSubscriptionsRequest {
    projectId: string;
    customerId: string;
    environment?: ListSubscriptionsEnvironmentEnum;
    startingAfter?: string;
    limit?: number;
}

/**
 * 
 */
export class CustomerApi extends runtime.BaseAPI {

    /**
     * Lists all Subscriptions associated with the Customer. This currently includes only RevenueCat Billing subscriptions. We are planning to add information about subscriptions on other supported stores soon.  This endpoint requires the following permission(s): `customer_information:subscriptions:read`.
     * Get a list of subscriptions associated with a customer
     */
    async listSubscriptionsRaw(requestParameters: ListSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListSubscriptions>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling listSubscriptions().'
            );
        }

        if (requestParameters['customerId'] == null) {
            throw new runtime.RequiredError(
                'customerId',
                'Required parameter "customerId" was null or undefined when calling listSubscriptions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['environment'] != null) {
            queryParameters['environment'] = requestParameters['environment'];
        }

        if (requestParameters['startingAfter'] != null) {
            queryParameters['starting_after'] = requestParameters['startingAfter'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/projects/{project_id}/customers/{customer_id}/subscriptions`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters['customerId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListSubscriptionsFromJSON(jsonValue));
    }

    /**
     * Lists all Subscriptions associated with the Customer. This currently includes only RevenueCat Billing subscriptions. We are planning to add information about subscriptions on other supported stores soon.  This endpoint requires the following permission(s): `customer_information:subscriptions:read`.
     * Get a list of subscriptions associated with a customer
     */
    async listSubscriptions(requestParameters: ListSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListSubscriptions> {
        const response = await this.listSubscriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ListSubscriptionsEnvironmentEnum = {
    Sandbox: 'sandbox',
    Production: 'production'
} as const;
export type ListSubscriptionsEnvironmentEnum = typeof ListSubscriptionsEnvironmentEnum[keyof typeof ListSubscriptionsEnvironmentEnum];

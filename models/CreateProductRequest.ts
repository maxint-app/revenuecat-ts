/* tslint:disable */
/* eslint-disable */
/**
 * Developer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime.ts";
import type { ProductType } from "./ProductType.ts";
import {
    ProductTypeFromJSON,
    ProductTypeFromJSONTyped,
    ProductTypeToJSON,
} from "./ProductType.ts";

/**
 * 
 * @export
 * @interface CreateProductRequest
 */
export interface CreateProductRequest {
    /**
     * The store identifier of the product.
     * - For Apple App Store products this is the product ID of the subscription or in-app product.
     * - For Google's Play Store, it should follow the format 'productId:basePlanId' for subscription products and SKU for one-time purchase products.
     * - For Stripe, the product identifier that always starts with "prod_"
     * - For Amazon, if it's a subscription, the term SKU of the subscription. If it's a one-time purchase, the SKU of the product.
     * 
     * @type {string}
     * @memberof CreateProductRequest
     */
    storeIdentifier: string;
    /**
     * The ID of the app
     * @type {string}
     * @memberof CreateProductRequest
     */
    appId: string;
    /**
     * 
     * @type {ProductType}
     * @memberof CreateProductRequest
     */
    type: ProductType;
    /**
     * The display name of the product
     * @type {string}
     * @memberof CreateProductRequest
     */
    displayName?: string;
}

/**
 * Check if a given object implements the CreateProductRequest interface.
 */
export function instanceOfCreateProductRequest(value: object): boolean {
    if (!('storeIdentifier' in value)) return false;
    if (!('appId' in value)) return false;
    if (!('type' in value)) return false;
    return true;
}

export function CreateProductRequestFromJSON(json: any): CreateProductRequest {
    return CreateProductRequestFromJSONTyped(json, false);
}

export function CreateProductRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateProductRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'storeIdentifier': json['store_identifier'],
        'appId': json['app_id'],
        'type': ProductTypeFromJSON(json['type']),
        'displayName': json['display_name'] == null ? undefined : json['display_name'],
    };
}

export function CreateProductRequestToJSON(value?: CreateProductRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'store_identifier': value['storeIdentifier'],
        'app_id': value['appId'],
        'type': ProductTypeToJSON(value['type']),
        'display_name': value['displayName'],
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * Developer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Country } from './Country';
import {
    CountryFromJSON,
    CountryFromJSONTyped,
    CountryToJSON,
} from './Country';
import type { EntitlementList } from './EntitlementList';
import {
    EntitlementListFromJSON,
    EntitlementListFromJSONTyped,
    EntitlementListToJSON,
} from './EntitlementList';
import type { SubscriptionEnvironment } from './SubscriptionEnvironment';
import {
    SubscriptionEnvironmentFromJSON,
    SubscriptionEnvironmentFromJSONTyped,
    SubscriptionEnvironmentToJSON,
} from './SubscriptionEnvironment';
import type { SubscriptionOwnership } from './SubscriptionOwnership';
import {
    SubscriptionOwnershipFromJSON,
    SubscriptionOwnershipFromJSONTyped,
    SubscriptionOwnershipToJSON,
} from './SubscriptionOwnership';
import type { SubscriptionPendingChanges } from './SubscriptionPendingChanges';
import {
    SubscriptionPendingChangesFromJSON,
    SubscriptionPendingChangesFromJSONTyped,
    SubscriptionPendingChangesToJSON,
} from './SubscriptionPendingChanges';
import type { SubscriptionTotalRevenueInUsd } from './SubscriptionTotalRevenueInUsd';
import {
    SubscriptionTotalRevenueInUsdFromJSON,
    SubscriptionTotalRevenueInUsdFromJSONTyped,
    SubscriptionTotalRevenueInUsdToJSON,
} from './SubscriptionTotalRevenueInUsd';

/**
 * 
 * @export
 * @interface Subscription
 */
export interface Subscription {
    /**
     * String representing the object's type. Objects of the same type share the same value.
     * @type {string}
     * @memberof Subscription
     */
    object: SubscriptionObjectEnum;
    /**
     * The id of the subscription
     * @type {string}
     * @memberof Subscription
     */
    id: string;
    /**
     * The id of the customer
     * @type {string}
     * @memberof Subscription
     */
    customerId: string;
    /**
     * The id of the original customer
     * @type {string}
     * @memberof Subscription
     */
    originalCustomerId: string;
    /**
     * The ID of the product that the customer is subscribed to
     * @type {string}
     * @memberof Subscription
     */
    productId: string;
    /**
     * The date when the subscription originally started in ms since epoch
     * @type {number}
     * @memberof Subscription
     */
    startsAt: number;
    /**
     * The date when the subscription billing period started in ms since epoch
     * @type {number}
     * @memberof Subscription
     */
    currentPeriodStartsAt: number;
    /**
     * The date when the subscription billing period ends in ms since epoch. Can be null if the subscription is paused until an indefinite date.
     * @type {number}
     * @memberof Subscription
     */
    currentPeriodEndsAt: number | null;
    /**
     * Determines whether the customer should currently be provided access to the entitlements associated with the subscription
     * @type {boolean}
     * @memberof Subscription
     */
    givesAccess: boolean;
    /**
     * Determines whether there is a pending payment associated with the subscription
     * @type {boolean}
     * @memberof Subscription
     */
    pendingPayment: boolean;
    /**
     * The auto renewal status of a subscription
     * @type {string}
     * @memberof Subscription
     */
    autoRenewalStatus: SubscriptionAutoRenewalStatusEnum;
    /**
     * The status of a subscription
     * @type {string}
     * @memberof Subscription
     */
    status: SubscriptionStatusEnum;
    /**
     * 
     * @type {SubscriptionTotalRevenueInUsd}
     * @memberof Subscription
     */
    totalRevenueInUsd: SubscriptionTotalRevenueInUsd;
    /**
     * The ID of the offering the customer saw when purchasing the subscription
     * @type {string}
     * @memberof Subscription
     */
    presentedOfferingId: string | null;
    /**
     * 
     * @type {EntitlementList}
     * @memberof Subscription
     */
    entitlements: EntitlementList;
    /**
     * 
     * @type {SubscriptionEnvironment}
     * @memberof Subscription
     */
    environment: SubscriptionEnvironment;
    /**
     * Store the subscription belongs to
     * @type {string}
     * @memberof Subscription
     */
    store: SubscriptionStoreEnum;
    /**
     * The store subscription identifier
     * @type {string}
     * @memberof Subscription
     */
    storeSubscriptionIdentifier: string;
    /**
     * 
     * @type {SubscriptionOwnership}
     * @memberof Subscription
     */
    ownership: SubscriptionOwnership;
    /**
     * 
     * @type {SubscriptionPendingChanges}
     * @memberof Subscription
     */
    pendingChanges?: SubscriptionPendingChanges;
    /**
     * 
     * @type {Country}
     * @memberof Subscription
     */
    country?: Country;
}


/**
 * @export
 */
export const SubscriptionObjectEnum = {
    Subscription: 'subscription'
} as const;
export type SubscriptionObjectEnum = typeof SubscriptionObjectEnum[keyof typeof SubscriptionObjectEnum];

/**
 * @export
 */
export const SubscriptionAutoRenewalStatusEnum = {
    WillRenew: 'will_renew',
    WillNotRenew: 'will_not_renew',
    WillChangeProduct: 'will_change_product',
    WillPause: 'will_pause',
    RequiresPriceIncreaseConsent: 'requires_price_increase_consent',
    HasAlreadyRenewed: 'has_already_renewed'
} as const;
export type SubscriptionAutoRenewalStatusEnum = typeof SubscriptionAutoRenewalStatusEnum[keyof typeof SubscriptionAutoRenewalStatusEnum];

/**
 * @export
 */
export const SubscriptionStatusEnum = {
    Trialing: 'trialing',
    Active: 'active',
    Expired: 'expired',
    InGracePeriod: 'in_grace_period',
    InBillingRetry: 'in_billing_retry',
    Paused: 'paused',
    Unknown: 'unknown'
} as const;
export type SubscriptionStatusEnum = typeof SubscriptionStatusEnum[keyof typeof SubscriptionStatusEnum];

/**
 * @export
 */
export const SubscriptionStoreEnum = {
    Amazon: 'amazon',
    AppStore: 'app_store',
    MacAppStore: 'mac_app_store',
    PlayStore: 'play_store',
    Promotional: 'promotional',
    Stripe: 'stripe',
    RcBilling: 'rc_billing'
} as const;
export type SubscriptionStoreEnum = typeof SubscriptionStoreEnum[keyof typeof SubscriptionStoreEnum];


/**
 * Check if a given object implements the Subscription interface.
 */
export function instanceOfSubscription(value: object): boolean {
    if (!('object' in value)) return false;
    if (!('id' in value)) return false;
    if (!('customerId' in value)) return false;
    if (!('originalCustomerId' in value)) return false;
    if (!('productId' in value)) return false;
    if (!('startsAt' in value)) return false;
    if (!('currentPeriodStartsAt' in value)) return false;
    if (!('currentPeriodEndsAt' in value)) return false;
    if (!('givesAccess' in value)) return false;
    if (!('pendingPayment' in value)) return false;
    if (!('autoRenewalStatus' in value)) return false;
    if (!('status' in value)) return false;
    if (!('totalRevenueInUsd' in value)) return false;
    if (!('presentedOfferingId' in value)) return false;
    if (!('entitlements' in value)) return false;
    if (!('environment' in value)) return false;
    if (!('store' in value)) return false;
    if (!('storeSubscriptionIdentifier' in value)) return false;
    if (!('ownership' in value)) return false;
    return true;
}

export function SubscriptionFromJSON(json: any): Subscription {
    return SubscriptionFromJSONTyped(json, false);
}

export function SubscriptionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Subscription {
    if (json == null) {
        return json;
    }
    return {
        
        'object': json['object'],
        'id': json['id'],
        'customerId': json['customer_id'],
        'originalCustomerId': json['original_customer_id'],
        'productId': json['product_id'],
        'startsAt': json['starts_at'],
        'currentPeriodStartsAt': json['current_period_starts_at'],
        'currentPeriodEndsAt': json['current_period_ends_at'],
        'givesAccess': json['gives_access'],
        'pendingPayment': json['pending_payment'],
        'autoRenewalStatus': json['auto_renewal_status'],
        'status': json['status'],
        'totalRevenueInUsd': SubscriptionTotalRevenueInUsdFromJSON(json['total_revenue_in_usd']),
        'presentedOfferingId': json['presented_offering_id'],
        'entitlements': EntitlementListFromJSON(json['entitlements']),
        'environment': SubscriptionEnvironmentFromJSON(json['environment']),
        'store': json['store'],
        'storeSubscriptionIdentifier': json['store_subscription_identifier'],
        'ownership': SubscriptionOwnershipFromJSON(json['ownership']),
        'pendingChanges': json['pending_changes'] == null ? undefined : SubscriptionPendingChangesFromJSON(json['pending_changes']),
        'country': json['country'] == null ? undefined : CountryFromJSON(json['country']),
    };
}

export function SubscriptionToJSON(value?: Subscription | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'object': value['object'],
        'id': value['id'],
        'customer_id': value['customerId'],
        'original_customer_id': value['originalCustomerId'],
        'product_id': value['productId'],
        'starts_at': value['startsAt'],
        'current_period_starts_at': value['currentPeriodStartsAt'],
        'current_period_ends_at': value['currentPeriodEndsAt'],
        'gives_access': value['givesAccess'],
        'pending_payment': value['pendingPayment'],
        'auto_renewal_status': value['autoRenewalStatus'],
        'status': value['status'],
        'total_revenue_in_usd': SubscriptionTotalRevenueInUsdToJSON(value['totalRevenueInUsd']),
        'presented_offering_id': value['presentedOfferingId'],
        'entitlements': EntitlementListToJSON(value['entitlements']),
        'environment': SubscriptionEnvironmentToJSON(value['environment']),
        'store': value['store'],
        'store_subscription_identifier': value['storeSubscriptionIdentifier'],
        'ownership': SubscriptionOwnershipToJSON(value['ownership']),
        'pending_changes': SubscriptionPendingChangesToJSON(value['pendingChanges']),
        'country': CountryToJSON(value['country']),
    };
}


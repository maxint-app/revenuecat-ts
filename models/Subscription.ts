/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { Country } from "./Country.js";
import type { Entitlement } from "./Entitlement.js";
import type { Environment } from "./Environment.js";
import type { MonetaryAmount } from "./MonetaryAmount.js";
import type { Ownership } from "./Ownership.js";
import type { Product } from "./Product.js";
export type Subscription = {
    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    object: Subscription.typeObj;
    /**
     * The id of the subscription
     */
    id: string;
    /**
     * The id of the customer
     */
    customer_id: string;
    /**
     * The id of the original customer
     */
    original_customer_id: string;
    /**
     * The ID of the product that the customer is subscribed to
     */
    product_id: string;
    /**
     * The date when the subscription originally started in ms since epoch
     */
    starts_at: number;
    /**
     * The date when the subscription billing period started in ms since epoch
     */
    current_period_starts_at: number;
    /**
     * The date when the subscription billing period ends in ms since epoch. Can be null if the subscription is paused until an indefinite date.
     */
    current_period_ends_at: number | null;
    /**
     * Determines whether the customer should currently be provided access to the entitlements associated with the subscription
     */
    gives_access: boolean;
    /**
     * Determines whether there is a pending payment associated with the subscription
     */
    pending_payment: boolean;
    /**
     * The auto renewal status of a subscription
     */
    auto_renewal_status: Subscription.auto_renewal_status;
    /**
     * The status of a subscription
     */
    status: Subscription.status;
    /**
     * Total revenue generated by a subscription in USD
     */
    total_revenue_in_usd: MonetaryAmount;
    /**
     * The ID of the offering the customer saw when purchasing the subscription
     */
    presented_offering_id: string | null;
    entitlements: {
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: Subscription.typeObj;
        /**
         * Details about each object.
         */
        items: Array<Entitlement>;
        /**
         * URL to access the next page of the customer's entitlements. If not present / null, there is no next page
         */
        next_page: string | null;
        /**
         * The URL where this list can be accessed.
         */
        url: string;
    };
    /**
     * The store environment
     */
    environment: Environment;
    /**
     * Store the subscription belongs to
     */
    store: Subscription.store;
    /**
     * The store subscription identifier
     */
    store_subscription_identifier: string;
    /**
     * Ownership of the subscription
     */
    ownership: Ownership;
    /**
     * Details about the pending object
     */
    pending_changes?: {
        /**
         * The product that will be active as of the next renewal
         */
        product?: Product;
    } | null;
    /**
     * Billing country in ISO alpha 2 code
     */
    country?: Country | null;
};
export namespace Subscription {
    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    export enum typeObj {
        SUBSCRIPTION = 'subscription',
    }
    /**
     * The auto renewal status of a subscription
     */
    export enum auto_renewal_status {
        WILL_RENEW = 'will_renew',
        WILL_NOT_RENEW = 'will_not_renew',
        WILL_CHANGE_PRODUCT = 'will_change_product',
        WILL_PAUSE = 'will_pause',
        REQUIRES_PRICE_INCREASE_CONSENT = 'requires_price_increase_consent',
        HAS_ALREADY_RENEWED = 'has_already_renewed',
    }
    /**
     * The status of a subscription
     */
    export enum status {
        TRIALING = 'trialing',
        ACTIVE = 'active',
        EXPIRED = 'expired',
        IN_GRACE_PERIOD = 'in_grace_period',
        IN_BILLING_RETRY = 'in_billing_retry',
        PAUSED = 'paused',
        UNKNOWN = 'unknown',
    }
    /**
     * Store the subscription belongs to
     */
    export enum store {
        AMAZON = 'amazon',
        APP_STORE = 'app_store',
        MAC_APP_STORE = 'mac_app_store',
        PLAY_STORE = 'play_store',
        PROMOTIONAL = 'promotional',
        STRIPE = 'stripe',
        RC_BILLING = 'rc_billing',
    }
}


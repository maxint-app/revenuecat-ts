/* tslint:disable */
/* eslint-disable */
/**
 * Developer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ProductsList } from './ProductsList';
import {
    ProductsListFromJSON,
    ProductsListFromJSONTyped,
    ProductsListToJSON,
} from './ProductsList';

/**
 * 
 * @export
 * @interface Entitlement
 */
export interface Entitlement {
    /**
     * String representing the object's type. Objects of the same type share the same value.
     * @type {string}
     * @memberof Entitlement
     */
    object: EntitlementObjectEnum;
    /**
     * ID of the project to which the entitlement belongs
     * @type {string}
     * @memberof Entitlement
     */
    projectId: string;
    /**
     * The id of the entitlement
     * @type {string}
     * @memberof Entitlement
     */
    id: string;
    /**
     * A custom identifier of the entitlement
     * @type {string}
     * @memberof Entitlement
     */
    lookupKey: string;
    /**
     * The display name of the entitlement
     * @type {string}
     * @memberof Entitlement
     */
    displayName: string;
    /**
     * The date when the entitlement was created in ms since epoch
     * @type {number}
     * @memberof Entitlement
     */
    createdAt: number;
    /**
     * 
     * @type {ProductsList}
     * @memberof Entitlement
     */
    products?: ProductsList;
}


/**
 * @export
 */
export const EntitlementObjectEnum = {
    Entitlement: 'entitlement'
} as const;
export type EntitlementObjectEnum = typeof EntitlementObjectEnum[keyof typeof EntitlementObjectEnum];


/**
 * Check if a given object implements the Entitlement interface.
 */
export function instanceOfEntitlement(value: object): boolean {
    if (!('object' in value)) return false;
    if (!('projectId' in value)) return false;
    if (!('id' in value)) return false;
    if (!('lookupKey' in value)) return false;
    if (!('displayName' in value)) return false;
    if (!('createdAt' in value)) return false;
    return true;
}

export function EntitlementFromJSON(json: any): Entitlement {
    return EntitlementFromJSONTyped(json, false);
}

export function EntitlementFromJSONTyped(json: any, ignoreDiscriminator: boolean): Entitlement {
    if (json == null) {
        return json;
    }
    return {
        
        'object': json['object'],
        'projectId': json['project_id'],
        'id': json['id'],
        'lookupKey': json['lookup_key'],
        'displayName': json['display_name'],
        'createdAt': json['created_at'],
        'products': json['products'] == null ? undefined : ProductsListFromJSON(json['products']),
    };
}

export function EntitlementToJSON(value?: Entitlement | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'object': value['object'],
        'project_id': value['projectId'],
        'id': value['id'],
        'lookup_key': value['lookupKey'],
        'display_name': value['displayName'],
        'created_at': value['createdAt'],
        'products': ProductsListToJSON(value['products']),
    };
}

